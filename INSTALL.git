
building and installing ttfautohint from git
============================================

Building ttfautohint from the git repository needs some tools that are not
required when building from a release:

  autoconf (2.65)
  automake (1.13)
  bison (2.6.5)
  flex (2.5.37)
  git (1.5.5)
  libtool (2.2.2)
  perl (this is a prerequisite of automake also)

If you configure to build the documentation files also (which are normally
distributed with the release package), the following is necessary:

  help2man (1.40.1)
  pandoc (2.8)
  inkscape (0.48.2)
  X11 (in particular the `xwininfo' program)
  ImageMagick (6.7.4)
  xelatex (TeX Live 2018)

The version numbers in parentheses are known to work.  Newer versions should
work also.

The main font for the PDF file is `Linux Libertine O'; in addition, we use
various sans-serif TrueType fonts from the `Noto' family that are not part
of TeX Live.  To access them it is recommended to use SVN to clone parts of
the huge `noto-fonts' git repository and adjust the `TTFONTS' environment
variable accordingly to make xelatex find the fonts in the proper
directories.

[Yes, we access a github repository with SVN to quickly download just a part
 of it!]

  svn checkout \
    https://github.com/googlei18n/noto-fonts/trunk/unhinted/ttf \
    noto-fonts

Here is an example how to set `TTFONTS'.

  TTFONTS="/your/path/to/noto-fonts/unhinted/ttf//;"

Note the double slash ending the path elements; this makes TeX and its tools
search all subdirectories.  Also note the trailing `;' character to ensure
that the directories are prepended to the built-in value of `TTFONTS'
(instead of replacing it).

For correct conversion of the SVG images to PDF, the `Linux Libertine O'
font family must be provided by the OS to inkscape.

Say

  ./bootstrap

to clone the `gnulib' repository (which gets installed as a git submodule),
to build the `configure' script, and to set up necessary auxiliary files.
Then you can proceed with the instructions given in the `INSTALL' file.


compilation within the MinGW environment (on Windows)
-----------------------------------------------------

[https://osdn.net/projects/mingw/]

  - Since MSYS, the shell of MinGW, uses LF as line endings, `git checkout'
    should not convert files to CRLF.  Before checking out the FreeType and
    ttfautohint repositories, you should issue the command

      git config --global core.autocrlf input

    to avoid any line ending conversion.

  - At the time of this writing (February 2014), the current MinGW bundle
    (in particular mingwrt-4.0.3; the gcc version is 4.8.1) contains a
    number of bugs that need work-arounds.  For this reason, you should use
    FreeType version 2.5.3 (or the git repository) and HarfBuzz version
    0.9.27 or newer.  The configuration scripts work just fine in an MSYS
    shell.

  - Only a very special functionality of HarfBuzz is needed; you might thus
    reduce dependencies by adding the following options to its `configure'
    script:

      --with-glib=no
      --with-gobject=no
      --with-cairo=no
      --with-icu=no

  - You need bison 2.5 or newer.  MinGW doesn't offer this, but you can
    download a MinGW port of version 3.0.2 from

      https://sourceforge.net/projects/ezwinports/files/

  - To compile a stand-alone version of ttfautohintGUI we must compile a
    static version of Qt 4 first.  I've successfully followed these
    instructions with version 4.8.5

      https://www.formortals.com/build-qt-static-small-microsoft-intel-gcc-compiler/

    together with the following minor patch to MinGW

      https://sourceforge.net/p/mingw/mingw-org-wsl/ci/928ddb53a9623fc38de3997a3acce4a8730f4dc6/

    Note that these build instructions should be executed in a normal
    cmd.exe shell, *not* MSYS.

    An alternative is given at

      https://wiki.qt.io/Building_a_static_Qt_for_Windows_using_MinGW

    using a PowerShell script.  However, you still need the small MinGW
    patch.

    It's not necessary to invoke `make install' for Qt.  For ttfautohint's
    `--with-qt' configure script argument in the next build step, use the
    `bin' subdirectory of the just built Qt library, for example

      --with-qt=/path/to/qt-4.8.5/bin

  - Now configure and compile ttfautohint (within an MSYS shell) using

      configure \
        CXX='g++ -static-libgcc' \
        --with-qt=<DIR> \
        --with-doc=no \
        ac_cv_func__set_invalid_parameter_handler=no
      make LDFLAGS=-all-static

    (The `ac_cv_func...' argument is another work-around for a MinGW bug,
    the `CXX' line is a fix for libtool).


compilation with mxe (on Unix, for Windows)
-------------------------------------------

[https://mxe.cc]

The following describes installation with Qt version 5.15.2 (as used by mxe
in July 2021).

  - Check out the mxe git repository.

  - Apply the following two patches to get smaller ttfautohint binaries.

diff --git a/src/harfbuzz.mk b/src/harfbuzz.mk
index 6b299da..bb56456 100644
--- a/src/harfbuzz.mk
+++ b/src/harfbuzz.mk
@@ -20,6 +20,10 @@ endef
 define $(PKG)_BUILD
     cd '$(1)' && ./configure \
         $(MXE_CONFIGURE_OPTS) \
+        --with-glib=no \
+        --with-gobject=no \
+        --with-cairo=no \
+        --with-icu=no \
         LIBS='-lstdc++'
     $(MAKE) -C '$(1)' -j '$(JOBS)' install
 endef
diff --git a/src/qt.mk b/src/qt.mk
index a8268ac4..17e8ead7 100644
--- a/src/qt.mk
+++ b/src/qt.mk
@@ -41,13 +41,16 @@ define $(PKG)_BUILD
         -device-option PKG_CONFIG='$(TARGET)-pkg-config' \
         -force-pkg-config \
         -release \
-        -exceptions \
+        -no-exceptions \
+        -no-qt3support \
         -static \
         -prefix '$(PREFIX)/$(TARGET)/qt' \
         -prefix-install \
         -script \
+        -no-scripttools \
+        -no-stl \
         -no-iconv \
-        -opengl desktop \
+        -no-opengl \
         -no-webkit \
         -no-glib \
         -no-gstreamer \
@@ -61,12 +64,7 @@ define $(PKG)_BUILD
         -nomake demos \
         -nomake docs \
         -nomake examples \
-        -xmlpatterns \
-        -qt-sql-sqlite \
-        -qt-sql-odbc \
-        -qt-sql-psql \
-        -no-sql-mysql \
-        -qt-sql-tds -D Q_USE_SYBASE \
+        -no-sql-sqlite \
         -system-zlib \
         -system-libpng \
         -system-libjpeg \

  - Copy the file `mxe/qtlocation-2.patch' into the mxe directory `src'.

  - mxe's default target is `i686-w64-mingw32.static', which builds a 32bit
    static executable.  We want exactly that for the distributed binaries.

    [For private builds, however, this can be changed by setting the
     `MXE_TARGETS' variable in the `settings.mk' file.  A template for this
     file gets automatically generated after calling make the first time, so
     you should call make, abort the build process after a few seconds,
     adjust `settings.mk' to your needs, then continue with the instructions
     below.  More details can be found on mxe's homepage.]

  - Now build the necessary mxe infrastructure with

      make qt5

    This downloads packages with a total size of approx. 720MBytes.
    Compilation easily takes some hours on a slower computer; all together
    it finally occupies slightly more than 3GBytes on the harddisk.

  - You are now ready to build ttfautohint from the git repository with

      export PATH=/your/path/to/mxe/usr/bin:$PATH

      mkdir out

      ./bootstrap
      ./configure \
        --host=i686-w64-mingw32.static \
        --with-qt=/your/path/to/mxe/usr/i686-w64-mingw32.static/qt5/bin \
        --disable-shared \
        --without-doc \
        --prefix=`pwd`/out
      make
      make install-strip

    Binaries can be found in `out/bin'.

EOF
