Version 1.8.5 (2022-XXX-XX)
---------------------------

  * Bug fix: `ttfautohint`'s option `--reference` didn't work on Windows
    platforms.


Version 1.8.4 (2021-Aug-14)
---------------------------

  * Support for Hanifi Rohingya, Nyiakeng Puachue Hmong, Medefaidrin, and
    Yezidi.

  * Bug fix: Option combination `-f none -S` to suppress hinting of
    unassigned glyphs was broken.

  * Parallel builds of the package are now fully supported.

  * The `configure` option `--with-freetype-config` has been removed;
    similarly to HarfBuzz, the `pkg-config` interface is now used
    exclusively for finding FreeType.


Version 1.8.3 (2019-Apr-09)
---------------------------

  * Support for Mongolian.  The de-facto standard is to render the glyphs
    horizontally (left-to-right) line by line, then rotating each line
    clockwise by 90\ degrees.  This allows the usage of ttfautohint.

  * Bug fix: Glyphs with complicated shapes or a large number of outlines
    could be distorted if displayed with FreeType (or stay unhinted if
    viewed on Windows).


Version 1.8.2 (2018-Jul-24)
---------------------------

  * Support for Georgian Mtavruli.

  * Bug fix: Compilation of ttfautohintGUI with homebrew on the Mac works
    again.

  * Bug fix: Point deltas didn't work for composite glyphs.


Version 1.8.1 (2018-Jan-01)
---------------------------

  * Bug fix: The `configure` script couldn't recognize Qt 5.10.x.


Version 1.8 (2017-Dec-31)
-------------------------

  * A third, 'natural' stem width mode has been added: No adjustments to
    stem widths, discrete blue zone positioning.  This is what FreeType uses
    for its 'light' (auto-)hinting mode.

  * A new option `-a` has been implemented to select the stem width mode for
    the three rendering targets (grayscale, GDI ClearType, DW ClearType). 
    This supersedes option `-g`, which is now deprecated.

  * Stem widths for the hinting process can now be manually set using the
    new `width` keyword in a control instructions file.  This is especially
    useful for extra-bold fonts, where the algorithmically derived values
    are often too large, causing the filling of 'eyes' in 'e' or 'a' glyphs
    at small sizes.

  * libttfautohint gets now installed as a DLL or static library (or both,
    depending on the parameters of the `configure` script), together with
    its header files.

  * Two functions `TTF_autohint_version` and `TTF_autohint_version_string`
    have been added to the library, which do the obvious.

  * Two options to `TTF_autohint` have been added: `alloc-func` and
    `free-func`.  These are necessary on some platforms if ttfautohint is
    compiled as a shared library, and the application uses a different
    runtime library.  This can happen, for example, on the MS Windows
    platform if your program is written in Python and communicates via the
    'ctypes' interface with the ttfautohint DLL.

  * `TTF_autohint` options
    `{gray,gdi-cleartype,dw-cleartype}-strong-stem-width` are now superseded
    by `{gray,gdi-cleartype,dw-cleartype}`-stem-width-mode` to handle the
    new natural stem width mode also.

  * Bug fix: Later control instructions now correctly overwrite earlier
    entries as documented.


Version 1.7 (2017-Aug-26)
-------------------------

  * Support for Adlam, Avestan, Bamum, Buhid, Unified Canadian Syllabics,
    Carian, Chakma, Coptic, Cypriot, Deseret, Glagolitic, Gothic, Kayah Li,
    Lisu, N'Ko, Ol Chiki, Old Turkic, Osage, Osmanya, Saurashtra, Shavian,
    Sundanese, Tai Viet, Tifinagh, and Vai scripts.

    Note that the used blue zone characters might not be optimal.  Please
    report any problems so that I can fix issues!

  * Option `--fallback-stem-width` now works for non-symbol fonts also, as
    documented.

  * TrueType bytecode generated by ttfautohint now correctly supports most
    recent MS interpreter versions.

  * A bug with bytecode for composite glyphs with composite subglyphs is now
    fixed.


Version 1.6 (2016-Nov-27)
-------------------------

  * A new option `--reference` (and `--reference-index` to select a font
    within a TTC) makes ttfautohint use the blue zones from another font.
    This helps synchronize the ascenders and descenders of font families.

  * Support for Armenian, Cherokee, Ethiopic, Georgian, Gujarati, Gurmukhi,
    Kannada, Malayalam, Sinhala, and Tamil scripts.

  * New option `--ttfa-info` to display a font's `TTFA` table (if present).

  * Glyphs covered by the fallback script are now hinted by default.
    Previously, they were scaled only.  The default fallback script `none`
    now implies hinting without script-specific blue zones (but still
    aligning stems to the grid if possible).

  * The new option `--fallback-scaling` changes the behaviour of the
    fallback script from hinting to scaling (as implemented in previous
    versions).

  * ttfautohint (but not ttfautohintGUI) now honours the SOURCE_DATE_EPOCH
    environment variable for reproducible builds.  This corresponds to the
    new library option `epoch`.

  * Bug fix: Allow dehinting of fonts that contain a `.ttfautohint` glyph.


Version 1.5 (2016-Jan-24)
-------------------------

  * Support for Khmer, Myanmar, and Bengali scripts.

  * Improved Devanagari hinting.

  * ttfautohintGUI can now be compiled with Qt5.

  * Bug fix: Too many delta control instructions for a single glyph caused a
    bytecode stack overflow, making the MS rasterizer ignore all hinting
    instructions for this glyph.

  * Bug fix: Don't create multiple `TTFA` tables in font.

  * Bug fix: Under certain circumstances, glyph indices used in Indic
    features were incorrectly assigned to the default script.


Version 1.4.1 (2015-Oct-17)
---------------------------

  * A bug in handling control instruction files could cause severe glyph
    shape distortions of accent-like glyphs.  All users should update.


Version 1.4 (2015-Oct-04)
-------------------------

  * Support for Thai and Lao scripts.

  * Support for the Arabic script.

  * Better support for scripts that contain superscript-like and
    subscript-like glyphs, e.g., the International Phonetic Alphabet (IPA).

  * Accents and other `non-base' glyphs are now hinted without snapping to
    blue zones.

  * A new control instruction syntax form was added to adjust the mapping
    between glyphs and styles.  Right now, its usage is quite limited; a
    forthcoming version will give much more flexibility.

  * The `touch` keyword in a control instructions file was buggy: If used
    for a point\ `P` at a ppem value\ `s`, it sometimes led to unwanted
    movements of\ `P` for ppem values unequal to\ `s`, thus causing outline
    distortions.


Version 1.3 (2015-Jan-06)
-------------------------

  * Keywords in control instruction files can be more verbose to increase
    readability.  You can now use `left`, `right`, `nodir`, `point`,
    `touch`, `xshift`, and `yshift` for `l`, `r`, `n`, `p`, `t, `x`, and
    `y`, respectively.

  * A new control instruction keyword `touch` was added to apply delta
    instructions before the final IUP bytecode commands, also `touching' the
    affected points (to use the TrueType instructions terminology).  Such
    deltas *do* work even with ClearType if applied to the non-ClearType
    direction.

  * Support for the Telugu script.

  * The amount of information about ttfautohint and its parameters that gets
    added to the `name` table by default has been reduced.  A new option
    `--detailed-info` restores the previous behaviour.

  * ttfautohintGUI crashed if not used with a control instruction file.

  * ttfautohintGUI now correctly switches to a horizontal two-column layout
    if the standard one-column layout would exceed the screen height.

  * A new option `--family-suffix` makes it possible to append a suffix to a
    font's family name in the `name` table.  This can be useful during the
    development process: It helps the operating system to simultaneously
    display several instances of a font that are processed with different
    ttfautohint parameters.

  * The new library option `info-post-callback` helps in processing data
    from the `name` table.


Version 1.2 (2014-Oct-06)
-------------------------

  * It is now possible to control the hinting process at a very low level
    using a 'control instructions' file.  Right now, two modes are
    supported:

      - Adding segments and changing segment directions.

      - Applying delta exceptions.  Note that this doesn't really work in
        ClearType.

    Please see the documentation for a description and a small tutorial.

    In the command-line front-end, use option `--control-file` to load such
    a file.

  * Support for input file watching in ttfautohintGUI: If the 'Watch Input
    File' box is checked, the program automatically regenerates the output
    file as soon as the input font or control instructions file gets
    modified.

    The idea is to dock ttfautohintGUI to your favourite font and text
    editor instead of adding a cheap text editor to ttfautohintGUI itself.

  * With the new option `--fallback-stem-width` it is now possible to set a
    default stem width for all scripts that lack proper standard characters
    in the font.

  * Add alias `--adjust-subglyphs` for option `--pre-hinting` to better
    describe its functionality.  The short form `-p` stays unchanged.

  * New option `--ttfa-table` to add an SFNT table `TTFA` to the output
    font, containing an ASCII dump of all used ttfautohint parameters
    (including control instructions).  Right now, this is mainly for
    archiving purposes.  Forthcoming versions of ttfautohint will be able to
    re-use this data if a font gets re-processed.

  * A harmless buglet was fixed that made the `glyf` table too large by one
    byte under some circumstances.

  * A bug fix taken from FreeType, correcting a crash for unusual outlines.

  * Better handling of TTC files.

  * New library options `error-callback` and `error-callback-data` for
    improved diagnostics.  [No change in the front-ends except better error
    messages.]

  * Many other, minor fixes and improvements.


Version 1.1 (2014-May-05)
-------------------------

  * Support for the Devanagari script.

  * Bug fixes in the computation of strong stem widths.  GDI hinting now
    gives much more consistent results.

  * Better recognition of script coverage: ttfautohint now properly scans
    composite glyphs to cover components also.

  * Improved glyph shape analysis: Non-flat local extrema are now recognized
    more reliably, and stem detection works better.


Version 1.00 (2014-Mar-20)
--------------------------

  * Much less memory consumption while handling fonts with complicated
    glyphs.

  * Option `-s` was partially broken.


Version 1.00rc1 (2014-Feb-07)
-----------------------------

  * OpenType feature support.  ttfautohint now uses the HarfBuzz library to
    analyze data from the `GSUB` table.  This allows the hinting of glyphs
    that don't have an entry in a font's `cmap` table, for example
    superscripts or small caps.

    Related to this, the new option `--default-script` controls the default
    (fallback) script used for OpenType features.

  * More than a single standard character is used.  For example, the 'latin'
    script uses characters 'o', 'O', and digit '0'.  This improves the
    hinting of fonts (and features) that have only a partial coverage of a
    script's character repertoire.

  * Much better GDI ClearType hinting in the range 30-80ppem (approx.),
    avoiding overly flat tops and bottoms of round glyphs.

  * Better handling of non-square pixels (this is, horizontal and vertical
    resolutions differ) in the created TrueType bytecode.


Version 0.97 (2013-Nov-09)
--------------------------

  * Improved script support.  Besides Cyrillic and Greek, which are now
    handled separately from Latin, ttfautohint can handle Hebrew.

  * Option `-f` now takes a parameter to specify the fallback script.  The
    corresponding long option name has been renamed from `--latin-fallback`
    to `--fallback-script`.

  * Work around a bug in display environments that use FreeType 2.5.0 and
    earlier for rendering: Sometimes, the 'strong' stem width routine was
    used for DW ClearType (this is, subpixel hinting in FreeType is enabled)
    even if 'smooth' was selected while generating the font with
    ttfautohint.


Version 0.96 (2013-Aug-06)
--------------------------

  * Option `--components` has been replaced with `--composites`: By default,
    the components of a composite glyph are now hinted separately, since
    tests has shown that this gives good results in most cases.  If this
    option is set, however, the composite glyph itself gets hinted (and the
    hints of the components are ignored).

    An unfortunate side effect is that ttfautohint's option `-c` (which
    stays as a shorthand for `--composites`) now does exactly the opposite
    as in previous releases.

  * Older versions of Monotype's 'iType' bytecode interpreter have a serious
    bug: The DIV instruction rounds the result, while the correct operation
    is truncation.  This caused 'exploding characters' with fonts hinted by
    ttfautohint.  Since many printers contain this rasterizer without any
    possibility to update to a non-buggy version, ttfautohint now contains
    work-arounds to circumvent the problem.

  * Better support for glyphs where some points have almost the same
    position (for example glyph 'Oslash' in font 'Roboto-Thin').

  * Better support for glyphs that use explicit 'on' points around round
    extrema.


Version 0.95 (2013-Mar-07)
--------------------------

  * New option `--dehint` to strip off all hints without generating new
    hints.  This option is intended for testing purposes.

  * Minor fixes to the created bytecode for compatibility.

  * Minor GUI improvements.


Version 0.94 (2012-Nov-29)
--------------------------

  * New option `--windows-compatibility` that adds two artificial blue zones
    at vertical positions given by 'usWinAscent' and 'usWinDescent'.  This
    helps ttfautohint's hinting algorithm reduce the possibility of clipping
    if those two values are very tight.

  * Implement option `--x-height-snapping-exceptions`, making ttfautohint
    avoid x-height snapping for selected PPEM values.  Useful in combination
    with `--windows-compatibility`.

  * Minor fixes to the created bytecode for compatibility and robustness.


Version 0.93 (2012-Oct-09)
--------------------------

  * New option `--components` to treat components of composite glyphs
    separately.  This greatly reduces the bytecode size.

    I'm waiting for reports whether this option works for most fonts; in
    case this is true I'm inverting the option, making it the default (and
    the old behaviour optional).

  * Full support of TTCs, this is, all subfonts get auto-hinted now.

  * The upper limit of the `--increase-x-height` option has been removed.

  * Drag-and-drop support in the GUI.

  * The command-line version of ttfautohint now acts like a (Unix) filter,
    this is, it accepts stdin and stdout as input and output, respectively.

  * Less memory consumption.


Version 0.92 (2012-Aug-07)
--------------------------

  * A serious bug in the created bytecode has been fixed, causing incorrect
    rounding.


Version 0.91 (2012-Jul-12)
--------------------------

  * A new, 'strong' routine to handle stem widths and positions has been
    added, to be selected with the `--strong-stem-width` command line
    option.  If it is active, stem widths and positions are snapped to the
    grid as much as possible.  This algorithm is useful for GDI ClearType
    support.

  * A new command line option `--debug` (not available for ttfautohintGUI)
    to print very detailed debugging information.


Version 0.9 (2012-Jun-06)
-------------------------

  * The created bytecode has been reduced in size, making it approx. 20%
    smaller.

  * New option `--symbol` to use standard stem height and width values
    instead of using character 'o' (which may be missing).  Use this option
    for symbol fonts or math glyphs.

  * More documentation (in text, HTML, and PDF format).  It's still
    incomplete, though.

  * Option `--ignore-permissions` has been renamed to
    `--ignore-restrictions`.  The short form is still `-i`.

  * Defaults for various parameters have been set to more sensible values:

      - hinting-range-max: 50 (was 1000)
      - hinting-limit: 200 (was 1000)

  * Option `--increase-x-height` now has a mandatory argument (in the range
    6-20 or value\ 0 to disable it, default value is 14).


Version 0.8 (2012-Mar-21)
-------------------------

  * Implement option `-x` to increase the x height of the font for small
    PPEM values by rounding up far more often then rounding down.

  * Add option '`-G n`' to switch off hinting completely above value\ `n`.

  * ttfautohint now appends version information and the used parameters to
    the 'Version' field(s) in the 'name' table.  This can be suppressed with
    option `-n`.


Version 0.7 (2012-Feb-05)
-------------------------

  * A GUI has been added, using the Qt framework.  The binary is called
    'ttfautohintGUI'.


Version 0.6.1 (2012-Jan-02)
---------------------------

  * The improved handling of composite glyphs in 0.6 was buggy under certain
    circumstances, making ttfautohint crash and FontValidator complain.

  * Dropout handling has been activated.


Version 0.6 (2011-Dec-25)
-------------------------

  * Improved handling of composite glyphs.

  * Implement option `-p` to pre-hint glyphs with original hints before
    conversion takes place.

  * Don't add a `DSIG` table if there is none in the input font.

  * Human-readable error messages instead of hexadecimal error codes.

  * Better tests (both at runtime and compile time) to reject too old
    FreeType versions.


Version 0.5 (2011-Nov-06)
-------------------------

  * Rendering on iOS is now expected to give good results.

  * No bad rendering at very large PPEM values.


Version 0.4 (2011-Oct-27)
-------------------------

  * The bytecode has been changed to 'create' twilight points.  This should
    avoid rendering artifacts on some platforms.


Version 0.3 (2011-Sep-09)
-------------------------

  * Fix font generation; sometimes the `glyf` table was one byte too short,
    making the font invalid.


Version 0.2 (2011-Jul-19)
-------------------------

  * Fix bytecode bugs that prevented correct rendering on some platforms.


Version 0.1 (2011-Jun-30)
-------------------------

  * First release.
